{"version":3,"file":"helper.ts","sources":["C:\\Users\\Haekal\\Kitameraki\\Project\\contact\\helper\\helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Uri } from \"../Uri\";\r\nimport { Request, Response } from \"express\";\r\nimport jwt from 'jsonwebtoken';\r\nimport { IUser } from \"../Types\";\r\nimport { UserModel } from \"../models/Models\";\r\nimport { TelegramBot } from \"node-telegram-bot-api\";\r\n\r\nexport async function authenticateToken(req: any, res: Response, next: any) {\r\n  let accessToken: string = req.headers[\"accesstoken\"];\r\n  if (accessToken) {\r\n    try {\r\n      await jwt.verify(accessToken, Uri.secretKey, async (err: any, result: any) => {\r\n        console.log(\"Error name access token\", err);\r\n        if (err) {\r\n          if (err.name.includes(\"TokenExpiredError\")) {\r\n            // console.log(\"Return token expired error\");\r\n            return res.send({\r\n              status: 403,\r\n              error: true,\r\n              message: \"TokenExpiredError\",\r\n            });\r\n          } else {\r\n            return res.send({\r\n              status: 403,\r\n              error: true,\r\n              message: 'Error token invalid signature'\r\n            });\r\n          }\r\n        } else {\r\n          return next();\r\n        }\r\n      });\r\n    } catch (error: any) {\r\n      console.log(error);\r\n    }\r\n  } else {\r\n    return res.send({\r\n      status: 403,\r\n      error: true,\r\n      message: \"Token doesn't exist\"\r\n    })\r\n  }\r\n}\r\n\r\nexport function textFormat(string: string, keyValuePairs: any): string {\r\n  if (Object.keys(keyValuePairs).length == 0) return string;\r\n  Object.keys(keyValuePairs).map((key) => {\r\n    string.replace(`{${key}}`, keyValuePairs[key])\r\n  });\r\n  return string;\r\n}\r\n\r\n/**\r\n * Send notification Telegram Bot\r\n */\r\nexport async function sendNotification(message: string, keyValuePair: any, userId: string) {\r\n  try {\r\n    const user: IUser = await UserModel.findOne<IUser>({ id: userId });\r\n    console.log(user);\r\n    if (user) {\r\n      if (user?.notification?.token && user?.notification?.chatId) {\r\n\r\n        const token = user.notification.token;\r\n        const chatId = user.notification.token.split(\"#\").pop();\r\n\r\n        const msg = textFormat(message, keyValuePair);\r\n\r\n        const bot = new TelegramBot(token, { polling: true });\r\n        bot.on('message', (msg) => {\r\n          console.log(\"msg\", msg);\r\n        });\r\n        bot.sendMessage(chatId, msg);\r\n\r\n        return ({\r\n          error: false,\r\n          status: 200,\r\n          message: \"Send notification successfully\"\r\n        })\r\n      } else {\r\n        return ({\r\n          error: true,\r\n          status: 404,\r\n          message: \"Chat ID and Conversation Toket doesn't exists\"\r\n        });\r\n      }\r\n    } else {\r\n      console.log(\"User is not found\");\r\n      return ({\r\n        error: true,\r\n        status: 404,\r\n        message: \"User doesn't exists\"\r\n      });\r\n    }\r\n  } catch (error) {\r\n    return ({\r\n      error: true,\r\n      status: 500,\r\n      message: error\r\n    });\r\n  }\r\n}\r\n"]}