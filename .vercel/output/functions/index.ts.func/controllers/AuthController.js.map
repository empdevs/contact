{"version":3,"file":"AuthController.ts","sources":["C:\\Users\\Haekal\\Kitameraki\\Project\\contact\\controllers\\AuthController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { RefreshTokenModel, UserModel } from \"../models/Models\";\r\nimport { ITokenInfo, IUser } from \"../Types\";\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Uri } from \"../Uri\";\r\n\r\nexport async function login(req: Request, res: Response) {\r\n\r\n  const { username, password }: string | any = req.body;\r\n  try {\r\n    if (username && password) {\r\n      let item: IUser = await UserModel.findOne<IUser>({ username: username });\r\n      if (item) {\r\n        const passwordIsValid: boolean = bcrypt.compareSync(password, item.password);\r\n        if (!!!passwordIsValid) {\r\n          return res.send({\r\n            status: 401,\r\n            error: true,\r\n            message: \"Password is wrong\",\r\n            data: null,\r\n          });\r\n        }\r\n\r\n        const tokenInfo: ITokenInfo = {\r\n          userId: item.id,\r\n          username: item.username,\r\n        }\r\n\r\n        // create token\r\n        const accessToken = jwt.sign(tokenInfo, Uri.secretKey, { expiresIn: '1h' });\r\n        const refreshToken = jwt.sign(tokenInfo, Uri.secretKeyRefresh, { expiresIn: '30d' });\r\n\r\n        const refreshTokenItem = await RefreshTokenModel.findOne({ userId: item.id });\r\n        if (!!!refreshTokenItem) await RefreshTokenModel.create({ userId: item.id, refreshToken: refreshToken });\r\n\r\n        return res.send({\r\n          status: 201,\r\n          error: false,\r\n          message: \"Login successfully\",\r\n          data: {\r\n            id: item.id,\r\n            username: item.username,\r\n            accessToken: accessToken\r\n          }\r\n        });\r\n      } else {\r\n        return res.send({\r\n          status: 401,\r\n          error: true,\r\n          message: \"Username or password is wrong\"\r\n        });\r\n      }\r\n    } else {\r\n      return res.send({\r\n        status: 401,\r\n        error: true,\r\n        message: \"Username and password doesn't exist\"\r\n      });\r\n    }\r\n  } catch (error: any) {\r\n    // console.log(error.response)\r\n    return res.send({\r\n      status: 401,\r\n      error: true,\r\n      message: error.message\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport async function refreshToken(req: Request, res: Response) {\r\n  const accessToken = req.body[\"accessToken\"];\r\n  if (!!!accessToken) {\r\n    return res.send({\r\n      status: 403,\r\n      error: true,\r\n      message: \"Access token doesn't exists\"\r\n    });\r\n  }\r\n\r\n  const userInfo: ITokenInfo = jwt.decode(accessToken);\r\n  const refreshTokenItem = await RefreshTokenModel.findOne({ userId: userInfo.userId });\r\n  if (!!!refreshTokenItem) {\r\n    return res.send({\r\n      status: 404,\r\n      error: true,\r\n      message: \"Refresh token doesn't exist\"\r\n    })\r\n  };\r\n\r\n  const refreshToken = refreshTokenItem?.refreshToken!;\r\n  await jwt.verify(refreshToken, Uri.secretKeyRefresh, async (err: any, result: any) => {\r\n    console.log(\"Error refresh token\", err)\r\n    console.log(\"Error name refresh token\", err?.name)\r\n    if (err) {\r\n      switch (err.name) {\r\n        case \"TokenExpiredError\":\r\n          await RefreshTokenModel.deleteOne({ userId: userInfo.userId })\r\n          return res.send({\r\n            status: 404,\r\n            error: true,\r\n            message: \"Refresh token expired\"\r\n          })\r\n          break;\r\n        default:\r\n          return res.send({\r\n            status: 500,\r\n            error: true,\r\n            message: \"Refresh token error\"\r\n          });\r\n          break;\r\n      }\r\n    } else {\r\n      const tokenInfo: ITokenInfo = {\r\n        userId: userInfo.userId,\r\n        username: userInfo.username,\r\n      }\r\n      const newAccessToken = jwt.sign(tokenInfo, Uri.secretKey, { expiresIn: '1h' });\r\n      return res.send({\r\n        status: 200,\r\n        error: false,\r\n        message: \"Access token is successfully refreshed \",\r\n        data: newAccessToken\r\n      })\r\n    }\r\n  });\r\n  return (res);\r\n\r\n}"]}